I"no<p><a href="/assets/html/ebm_structured_prediction.html">EBMs + Structured Prediction Jupyter Notebook HTML</a></p>

<p><a href="https://www.kaggle.com/code/mizomatic/a-tutorial-on-energy-based-models-ebms/notebook">Kaggle Source from sumanyumuku98</a>
 <!--more-->
This used to be a homework in NYU Deep Learning class taught by Alfredo Canziani and Yann LeCun, and someone reshared it in Kaggle. I had the luck to take their class, and I am grateful someone had kept a better record of this than I did.  <!--more--></p>

<h3>Intro</h3>

<p>Energy-Based Models (EBMs) assign a scalar <strong>energy</strong> to configurations of variables and perform inference by <strong>minimizing energy</strong>. We tackle <strong>structured prediction</strong> for text recognition: transcribing a word image into characters of <strong>variable length</strong>.<br />
We (1) build a synthetic dataset, (2) pretrain a sliding-window CNN on single characters, (3) align windowed predictions to labels with a <strong>Viterbi</strong> dynamic program, (4) train an EBM using <strong>cross-entropy along the best path</strong>, and (5) compare to a Connectionist Temporal Classification CTC (Graph Transducer Networks GTN) approach.</p>

<p><strong>Highlights</strong></p>
<ul>
  <li>Sliding-window CNN outputs <code class="language-plaintext highlighter-rouge">K×27</code> energies (26 letters + blank).</li>
  <li><strong>Viterbi</strong> finds the minimum-energy alignment between windows and targets.</li>
  <li>EBM training: <strong>sum of cross-entropies along the Viterbi path</strong>.</li>
  <li><strong>GTN/CTC</strong> alternative: graph-based, batched training without manual DP.</li>
  <li>Works on synthetic and “handwritten-style” fonts; simple collapse decoding recovers text.</li>
</ul>

<h3>Example 1 — Dataset, Model, Single-Character Pretraining</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># --- Imports &amp; setup ---
</span><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">ImageDraw</span><span class="p">,</span> <span class="n">ImageFont</span><span class="p">,</span> <span class="n">Image</span>
<span class="kn">import</span> <span class="nn">string</span><span class="p">,</span> <span class="n">random</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">copy</span>
<span class="kn">import</span> <span class="nn">torch</span>
<span class="kn">from</span> <span class="nn">torch</span> <span class="kn">import</span> <span class="n">nn</span>
<span class="kn">from</span> <span class="nn">torch.optim</span> <span class="kn">import</span> <span class="n">Adam</span>
<span class="kn">import</span> <span class="nn">torch.optim</span> <span class="k">as</span> <span class="n">optim</span>
<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
<span class="kn">from</span> <span class="nn">tqdm.notebook</span> <span class="kn">import</span> <span class="n">tqdm</span>
<span class="kn">import</span> <span class="nn">torchvision</span>
<span class="kn">from</span> <span class="nn">torchvision</span> <span class="kn">import</span> <span class="n">transforms</span>
<span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">torch</span><span class="p">.</span><span class="n">manual_seed</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="c1"># --- Constants ---
</span><span class="n">ALPHABET_SIZE</span> <span class="o">=</span> <span class="mi">27</span>  <span class="c1"># 26 letters + 1 blank/divider
</span><span class="n">BETWEEN</span> <span class="o">=</span> <span class="mi">26</span>

<span class="c1"># --- Basic transforms ---
</span><span class="n">simple_transforms</span> <span class="o">=</span> <span class="n">transforms</span><span class="p">.</span><span class="n">Compose</span><span class="p">([</span><span class="n">transforms</span><span class="p">.</span><span class="n">ToTensor</span><span class="p">()])</span>

<span class="c1"># --- Synthetic dataset of word images ---
</span><span class="k">class</span> <span class="nc">SimpleWordsDataset</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">IterableDataset</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">max_length</span><span class="p">,</span> <span class="nb">len</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">jitter</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">noise</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">max_length</span> <span class="o">=</span> <span class="n">max_length</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">transforms</span> <span class="o">=</span> <span class="n">transforms</span><span class="p">.</span><span class="n">ToTensor</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="nb">len</span> <span class="o">=</span> <span class="nb">len</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">jitter</span> <span class="o">=</span> <span class="n">jitter</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">noise</span> <span class="o">=</span> <span class="n">noise</span>
  
    <span class="k">def</span> <span class="nf">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="nb">len</span>

    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="nb">len</span><span class="p">):</span>
            <span class="n">text</span> <span class="o">=</span> <span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="n">string</span><span class="p">.</span><span class="n">ascii_lowercase</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">max_length</span><span class="p">)])</span>
            <span class="n">img</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">draw_text</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">jitter</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">jitter</span><span class="p">,</span> <span class="n">noise</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">noise</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">img</span><span class="p">,</span> <span class="n">text</span>
  
    <span class="k">def</span> <span class="nf">draw_text</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">jitter</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">noise</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">length</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">length</span> <span class="o">=</span> <span class="mi">18</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
        <span class="n">img</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="s">'L'</span><span class="p">,</span> <span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="mi">32</span><span class="p">))</span>
        <span class="n">fnt</span> <span class="o">=</span> <span class="n">ImageFont</span><span class="p">.</span><span class="n">truetype</span><span class="p">(</span><span class="s">"fonts/Anonymous.ttf"</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>

        <span class="n">d</span> <span class="o">=</span> <span class="n">ImageDraw</span><span class="p">.</span><span class="n">Draw</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
        <span class="n">pos</span> <span class="o">=</span> <span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">),</span> <span class="mi">5</span><span class="p">)</span> <span class="k">if</span> <span class="n">jitter</span> <span class="k">else</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
        <span class="n">d</span><span class="p">.</span><span class="n">text</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">font</span><span class="o">=</span><span class="n">fnt</span><span class="p">)</span>

        <span class="n">img</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">transforms</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
        <span class="n">img</span><span class="p">[</span><span class="n">img</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span> 
        <span class="k">if</span> <span class="n">noise</span><span class="p">:</span>
            <span class="n">img</span> <span class="o">+=</span> <span class="n">torch</span><span class="p">.</span><span class="n">bernoulli</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">ones_like</span><span class="p">(</span><span class="n">img</span><span class="p">)</span> <span class="o">*</span> <span class="mf">0.1</span><span class="p">)</span>
            <span class="n">img</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="n">clamp</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">img</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

<span class="c1"># --- Sliding window CNN (character-sized kernel) ---
</span><span class="k">class</span> <span class="nc">SimpleNet</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="n">Module</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">conv</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Conv2d</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">512</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="mi">18</span><span class="p">),</span> <span class="n">stride</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="s">"valid"</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">linear</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="n">Linear</span><span class="p">(</span><span class="mi">512</span><span class="p">,</span> <span class="n">ALPHABET_SIZE</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>
        <span class="c1"># Input: (B, 1, 32, W) -&gt; Conv over width -&gt; squeeze height -&gt; (B,K,512) -&gt; Linear -&gt; (B,K,27)
</span>        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">linear</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">conv</span><span class="p">(</span><span class="n">x</span><span class="p">).</span><span class="n">squeeze</span><span class="p">(</span><span class="n">dim</span><span class="o">=-</span><span class="mi">2</span><span class="p">).</span><span class="n">permute</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>

<span class="c1"># --- Helpers for plotting (optional) ---
</span><span class="k">def</span> <span class="nf">plot_energies</span><span class="p">(</span><span class="n">ce</span><span class="p">):</span>
    <span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">dpi</span><span class="o">=</span><span class="mi">200</span><span class="p">)</span>
    <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">axes</span><span class="p">()</span>
    <span class="n">im</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">ce</span><span class="p">.</span><span class="n">cpu</span><span class="p">().</span><span class="n">T</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'window locations →'</span><span class="p">);</span> <span class="n">ax</span><span class="p">.</span><span class="n">xaxis</span><span class="p">.</span><span class="n">set_label_position</span><span class="p">(</span><span class="s">'top'</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'← classes'</span><span class="p">);</span> <span class="n">ax</span><span class="p">.</span><span class="n">set_xticks</span><span class="p">([]);</span> <span class="n">ax</span><span class="p">.</span><span class="n">set_yticks</span><span class="p">([])</span>
    <span class="n">cax</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="n">add_axes</span><span class="p">([</span><span class="n">ax</span><span class="p">.</span><span class="n">get_position</span><span class="p">().</span><span class="n">x1</span><span class="o">+</span><span class="mf">0.01</span><span class="p">,</span><span class="n">ax</span><span class="p">.</span><span class="n">get_position</span><span class="p">().</span><span class="n">y0</span><span class="p">,</span><span class="mf">0.02</span><span class="p">,</span><span class="n">ax</span><span class="p">.</span><span class="n">get_position</span><span class="p">().</span><span class="n">height</span><span class="p">])</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">colorbar</span><span class="p">(</span><span class="n">im</span><span class="p">,</span> <span class="n">cax</span><span class="o">=</span><span class="n">cax</span><span class="p">)</span>

<span class="c1"># --- One-character pretraining ---
</span><span class="k">def</span> <span class="nf">cross_entropy</span><span class="p">(</span><span class="n">energies</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="c1"># Energies -&gt; minimize =&gt; use log-soft-argmin (negate energies)
</span>    <span class="k">return</span> <span class="n">nn</span><span class="p">.</span><span class="n">functional</span><span class="p">.</span><span class="n">cross_entropy</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="n">energies</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">simple_collate_fn</span><span class="p">(</span><span class="n">samples</span><span class="p">):</span>
    <span class="n">images</span><span class="p">,</span> <span class="n">annotations</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">samples</span><span class="p">)</span>
    <span class="n">images</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>
    <span class="n">annotations</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">annotations</span><span class="p">)</span>
    <span class="n">annotations</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">c</span><span class="p">:</span> <span class="n">torch</span><span class="p">.</span><span class="n">tensor</span><span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s">'a'</span><span class="p">)),</span> <span class="n">annotations</span><span class="p">))</span>
    <span class="n">m_width</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="nb">max</span><span class="p">([</span><span class="n">i</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">images</span><span class="p">]))</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">images</span><span class="p">)):</span>
        <span class="n">images</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="n">functional</span><span class="p">.</span><span class="n">pad</span><span class="p">(</span><span class="n">images</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">m_width</span> <span class="o">-</span> <span class="n">images</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">shape</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">images</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">images</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">unsqueeze</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">torch</span><span class="p">.</span><span class="n">stack</span><span class="p">(</span><span class="n">annotations</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">torch</span><span class="p">.</span><span class="n">stack</span><span class="p">(</span><span class="n">images</span><span class="p">),</span> <span class="n">torch</span><span class="p">.</span><span class="n">stack</span><span class="p">(</span><span class="n">annotations</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">train_model</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">epochs</span><span class="p">,</span> <span class="n">dataloader</span><span class="p">,</span> <span class="n">criterion</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">):</span>
    <span class="n">model</span><span class="p">.</span><span class="n">train</span><span class="p">()</span>
    <span class="n">pbar</span> <span class="o">=</span> <span class="n">tqdm</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">epochs</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">pbar</span><span class="p">:</span>
        <span class="n">train_loss</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="k">for</span> <span class="n">images</span><span class="p">,</span> <span class="n">target</span> <span class="ow">in</span> <span class="n">dataloader</span><span class="p">:</span>
            <span class="n">images</span> <span class="o">=</span> <span class="n">images</span><span class="p">.</span><span class="n">unsqueeze</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># (B,1,32,W)
</span>            <span class="n">optimizer</span><span class="p">.</span><span class="n">zero_grad</span><span class="p">()</span>
            <span class="n">out</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">images</span><span class="p">)</span>          <span class="c1"># (B,K,27), for 1 char K==1
</span>            <span class="n">loss</span> <span class="o">=</span> <span class="n">criterion</span><span class="p">(</span><span class="n">out</span><span class="p">.</span><span class="n">squeeze</span><span class="p">(),</span> <span class="n">target</span><span class="o">=</span><span class="n">target</span><span class="p">)</span>
            <span class="n">loss</span><span class="p">.</span><span class="n">backward</span><span class="p">();</span> <span class="n">optimizer</span><span class="p">.</span><span class="n">step</span><span class="p">()</span>
            <span class="n">train_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="p">.</span><span class="n">item</span><span class="p">()</span>
        <span class="n">train_loss</span> <span class="o">/=</span> <span class="nb">len</span><span class="p">(</span><span class="n">dataloader</span><span class="p">)</span>
        <span class="n">pbar</span><span class="p">.</span><span class="n">set_postfix</span><span class="p">({</span><span class="s">'Train Loss'</span><span class="p">:</span> <span class="n">train_loss</span><span class="p">})</span>

<span class="c1"># Usage:
# sds_1 = SimpleWordsDataset(1, len=1000, jitter=True, noise=False)
# loader_1 = torch.utils.data.DataLoader(sds_1, batch_size=16, num_workers=0, collate_fn=simple_collate_fn)
# model = SimpleNet()
# optimizer = Adam(model.parameters(), lr=1e-2)
# train_model(model, 15, loader_1, cross_entropy, optimizer)
</span>
<span class="c1"># Accuracy check on single-char:
</span><span class="k">def</span> <span class="nf">get_accuracy</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">dataset</span><span class="p">):</span>
    <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">img</span><span class="p">,</span> <span class="n">label</span> <span class="ow">in</span> <span class="n">dataset</span><span class="p">:</span>
        <span class="n">energies</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">unsqueeze</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="n">unsqueeze</span><span class="p">(</span><span class="mi">0</span><span class="p">))[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span>  <span class="c1"># (27,)
</span>        <span class="n">pred</span> <span class="o">=</span> <span class="n">energies</span><span class="p">.</span><span class="n">argmin</span><span class="p">(</span><span class="n">dim</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">cnt</span> <span class="o">+=</span> <span class="nb">int</span><span class="p">(</span><span class="n">pred</span> <span class="o">==</span> <span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">label</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s">'a'</span><span class="p">)))</span>
    <span class="k">return</span> <span class="n">cnt</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">dataset</span><span class="p">)</span>

<span class="c1"># tds = SimpleWordsDataset(1, len=100)
# assert get_accuracy(model, tds) == 1.0
</span></code></pre></div></div>

<p><strong>Highlights</strong></p>
<ul>
  <li>One-character dataset &amp; padding collate.</li>
  <li><code class="language-plaintext highlighter-rouge">SimpleNet</code> ensures <code class="language-plaintext highlighter-rouge">(32×18)</code> receptive field → per-window energies over 27 classes.</li>
</ul>

<h3>Example 2 — Alignment Utilities &amp; Viterbi (Dynamic Programming)</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># --- Path/CE matrices (vectorized) ---
</span><span class="k">def</span> <span class="nf">build_path_matrix</span><span class="p">(</span><span class="n">energies</span><span class="p">,</span> <span class="n">targets</span><span class="p">):</span>
    <span class="s">"""
    energies: (B, L, 27)
    targets:  (B, T) integer indices in [0..26]
    returns:  (B, L, T) where out[b,i,k] = energies[b,i,targets[b,k]]
    """</span>
    <span class="n">L</span> <span class="o">=</span> <span class="n">energies</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">targets_exp</span> <span class="o">=</span> <span class="n">targets</span><span class="p">.</span><span class="n">unsqueeze</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="n">repeat</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">L</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>      <span class="c1"># (B,L,T)
</span>    <span class="k">return</span> <span class="n">torch</span><span class="p">.</span><span class="n">gather</span><span class="p">(</span><span class="n">energies</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">targets_exp</span><span class="p">)</span>           <span class="c1"># (B,L,T)
</span>
<span class="k">def</span> <span class="nf">build_ce_matrix</span><span class="p">(</span><span class="n">energies</span><span class="p">,</span> <span class="n">targets</span><span class="p">):</span>
    <span class="s">"""
    ce[b,i,k] = CE(energies[b,i], targets[b,k])
    returns: (B, L, T)
    """</span>
    <span class="n">L</span><span class="p">,</span> <span class="n">T</span> <span class="o">=</span> <span class="n">energies</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">targets</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">energies4</span> <span class="o">=</span> <span class="n">energies</span><span class="p">.</span><span class="n">permute</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">).</span><span class="n">unsqueeze</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">).</span><span class="n">repeat</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">T</span><span class="p">)</span>  <span class="c1"># (B,27,L,T)
</span>    <span class="n">targets4</span>  <span class="o">=</span> <span class="n">targets</span><span class="p">.</span><span class="n">unsqueeze</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="n">repeat</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">L</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>                      <span class="c1"># (B,L,T)
</span>    <span class="k">return</span> <span class="n">cross_entropy</span><span class="p">(</span><span class="n">energies4</span><span class="p">,</span> <span class="n">targets4</span><span class="p">,</span> <span class="n">reduction</span><span class="o">=</span><span class="s">'none'</span><span class="p">)</span>

<span class="c1"># --- Label transform: interleave blanks: 'cat' -&gt; c _ a _ t _ ---
</span><span class="k">def</span> <span class="nf">transform_word</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="n">encoded</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
        <span class="n">encoded</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="s">'a'</span><span class="p">))</span>
        <span class="n">encoded</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">BETWEEN</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">torch</span><span class="p">.</span><span class="n">tensor</span><span class="p">(</span><span class="n">encoded</span><span class="p">)</span>  <span class="c1"># len = 2*len(s)
</span>
<span class="c1"># --- Path validity &amp; energy ---
</span><span class="k">def</span> <span class="nf">checkValidMapping</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">T</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">path</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">path</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">path</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
            <span class="k">return</span> <span class="bp">False</span>
    <span class="k">return</span> <span class="bp">True</span>

<span class="k">def</span> <span class="nf">path_energy</span><span class="p">(</span><span class="n">pm</span><span class="p">,</span> <span class="n">path</span><span class="p">):</span>
    <span class="s">"""
    pm: (L,T) energies for (window, target-pos)
    path: list of length L with target indices
    """</span>
    <span class="n">T</span> <span class="o">=</span> <span class="n">pm</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">checkValidMapping</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">T</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">torch</span><span class="p">.</span><span class="n">tensor</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">30</span><span class="p">)</span>
    <span class="n">energy</span> <span class="o">=</span> <span class="mf">0.0</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
        <span class="n">energy</span> <span class="o">+=</span> <span class="n">pm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">c</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">energy</span>

<span class="c1"># --- Viterbi (DP) to find best path ---
</span><span class="k">def</span> <span class="nf">find_path</span><span class="p">(</span><span class="n">pm</span><span class="p">):</span>
    <span class="s">"""
    pm: (L,T) energy matrix
    returns: (free_energy, path_points, dp)
      - free_energy: sum on best path
      - path_points: list of (i,j) along best path
      - dp: DP table (L,T)
    """</span>
    <span class="n">L</span><span class="p">,</span> <span class="n">T</span> <span class="o">=</span> <span class="n">pm</span><span class="p">.</span><span class="n">shape</span>
    <span class="n">dp</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">L</span><span class="p">,</span> <span class="n">T</span><span class="p">),</span> <span class="n">device</span><span class="o">=</span><span class="n">pm</span><span class="p">.</span><span class="n">device</span><span class="p">)</span>
    <span class="n">parent</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">None</span><span class="p">]</span><span class="o">*</span><span class="n">T</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">L</span><span class="p">)]</span>
    <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">pm</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">];</span> <span class="n">parent</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">T</span><span class="p">):</span>
        <span class="n">dp</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span><span class="o">**</span><span class="mi">30</span>
        <span class="n">parent</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">L</span><span class="p">):</span>
        <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">pm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">parent</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">L</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">T</span><span class="p">):</span>
            <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">],</span> <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">:</span>
                <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">pm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">];</span> <span class="n">parent</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">dp</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span> <span class="o">+</span> <span class="n">pm</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">];</span> <span class="n">parent</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="c1"># Backtrack: pick best j in last row
</span>    <span class="n">j</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">argmin</span><span class="p">(</span><span class="n">dp</span><span class="p">[</span><span class="n">L</span><span class="o">-</span><span class="mi">1</span><span class="p">]).</span><span class="n">item</span><span class="p">()</span>
    <span class="n">path</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">L</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">path</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
        <span class="n">_</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">parent</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>
    <span class="n">path</span><span class="p">.</span><span class="n">reverse</span><span class="p">()</span>
    <span class="n">points</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">L</span><span class="p">),</span> <span class="n">path</span><span class="p">))</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">path_energy</span><span class="p">(</span><span class="n">pm</span><span class="p">,</span> <span class="n">path</span><span class="p">),</span> <span class="n">points</span><span class="p">,</span> <span class="n">dp</span><span class="p">)</span>

<span class="c1"># --- Example usage (alphabet image) ---
# alphabet = SimpleWordsDataset(1).draw_text(string.ascii_lowercase, 340)
# energies = model(alphabet.view(1,1,*alphabet.shape))   # (1,L,27)
# targets  = transform_word(string.ascii_lowercase).unsqueeze(0)  # (1,T)
# pm = build_path_matrix(energies, targets)              # (1,L,T)
# free_energy, path, dp = find_path(pm[0])
</span></code></pre></div></div>

<p><strong>Highlights</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">build_path_matrix</code> gathers per-window energy for each label position.</li>
  <li><code class="language-plaintext highlighter-rouge">find_path</code> implements the <strong>minimum-energy monotone alignment</strong>.</li>
  <li>Diagonal-ish best paths appear as the model improves.</li>
</ul>

<h3>Example 3 — Train EBM with Viterbi Alignments</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">collate_fn</span><span class="p">(</span><span class="n">samples</span><span class="p">):</span>
    <span class="s">"""Collate for multi-char: pad images to same width; interleave blanks in labels and pad with BETWEEN."""</span>
    <span class="n">images</span><span class="p">,</span> <span class="n">annotations</span> <span class="o">=</span> <span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">samples</span><span class="p">)</span>
    <span class="n">images</span><span class="p">,</span> <span class="n">annotations</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">images</span><span class="p">),</span> <span class="nb">list</span><span class="p">(</span><span class="n">annotations</span><span class="p">)</span>
    <span class="n">annotations</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">transform_word</span><span class="p">,</span> <span class="n">annotations</span><span class="p">))</span>
    <span class="n">m_width</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="nb">max</span><span class="p">([</span><span class="n">i</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">images</span><span class="p">]))</span>
    <span class="n">m_len</span>   <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="nb">max</span><span class="p">([</span><span class="n">s</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">annotations</span><span class="p">]))</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">images</span><span class="p">)):</span>
        <span class="n">images</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="n">functional</span><span class="p">.</span><span class="n">pad</span><span class="p">(</span><span class="n">images</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">m_width</span> <span class="o">-</span> <span class="n">images</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">shape</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span>
        <span class="n">annotations</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="n">functional</span><span class="p">.</span><span class="n">pad</span><span class="p">(</span><span class="n">annotations</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">m_len</span> <span class="o">-</span> <span class="n">annotations</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="n">value</span><span class="o">=</span><span class="n">BETWEEN</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">images</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">images</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">unsqueeze</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">torch</span><span class="p">.</span><span class="n">stack</span><span class="p">(</span><span class="n">annotations</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">torch</span><span class="p">.</span><span class="n">stack</span><span class="p">(</span><span class="n">images</span><span class="p">),</span> <span class="n">torch</span><span class="p">.</span><span class="n">stack</span><span class="p">(</span><span class="n">annotations</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">train_ebm_model</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">num_epochs</span><span class="p">,</span> <span class="n">train_loader</span><span class="p">,</span> <span class="n">criterion</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">):</span>
    <span class="s">"""Train EBM using best-path (Viterbi) alignments."""</span>
    <span class="n">pbar</span> <span class="o">=</span> <span class="n">tqdm</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">num_epochs</span><span class="p">))</span>
    <span class="n">model</span><span class="p">.</span><span class="n">train</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">pbar</span><span class="p">:</span>
        <span class="n">total</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="k">for</span> <span class="n">samples</span><span class="p">,</span> <span class="n">targets</span> <span class="ow">in</span> <span class="n">train_loader</span><span class="p">:</span>
            <span class="n">optimizer</span><span class="p">.</span><span class="n">zero_grad</span><span class="p">()</span>
            <span class="n">energies</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">samples</span><span class="p">.</span><span class="n">unsqueeze</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>           <span class="c1"># (B,L,27)
</span>            <span class="n">pm</span> <span class="o">=</span> <span class="n">build_path_matrix</span><span class="p">(</span><span class="n">energies</span><span class="p">,</span> <span class="n">targets</span><span class="p">)</span>        <span class="c1"># (B,L,T)
</span>            <span class="n">batch_losses</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">pm</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
                <span class="n">free_energy</span><span class="p">,</span> <span class="n">best_path</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">find_path</span><span class="p">(</span><span class="n">pm</span><span class="p">[</span><span class="n">b</span><span class="p">])</span>  <span class="c1"># best_path: list[(i,j)]
</span>                <span class="n">j_indices</span> <span class="o">=</span> <span class="p">[</span><span class="n">ij</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">ij</span> <span class="ow">in</span> <span class="n">best_path</span><span class="p">]</span>       <span class="c1"># target indices along path
</span>                <span class="c1"># Sum CE along best path:
</span>                <span class="n">batch_losses</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">criterion</span><span class="p">(</span><span class="n">energies</span><span class="p">[</span><span class="n">b</span><span class="p">],</span> <span class="n">targets</span><span class="p">[</span><span class="n">b</span><span class="p">,</span> <span class="n">j_indices</span><span class="p">]))</span>
            <span class="n">loss</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">batch_losses</span><span class="p">)</span>
            <span class="n">total</span> <span class="o">+=</span> <span class="n">loss</span><span class="p">.</span><span class="n">item</span><span class="p">()</span>
            <span class="n">loss</span><span class="p">.</span><span class="n">backward</span><span class="p">();</span> <span class="n">optimizer</span><span class="p">.</span><span class="n">step</span><span class="p">()</span>
        <span class="n">pbar</span><span class="p">.</span><span class="n">set_postfix</span><span class="p">({</span><span class="s">'train_loss'</span><span class="p">:</span> <span class="n">total</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">.</span><span class="n">dataset</span><span class="p">)})</span>

<span class="c1"># Usage:
# sds2 = SimpleWordsDataset(2, 2500)
# loader2 = torch.utils.data.DataLoader(sds2, batch_size=32, num_workers=0, collate_fn=collate_fn)
# ebm_model = copy.deepcopy(model)
# optimizer = Adam(ebm_model.parameters(), lr=1e-3)
# train_ebm_model(ebm_model, 15, loader2, cross_entropy, optimizer)
</span></code></pre></div></div>

<p><strong>Highlights</strong></p>
<ul>
  <li>Loss is the <strong>sum of cross-entropies along the Viterbi path</strong>.</li>
  <li>Works but <strong>slow</strong> due to per-sample DP; suitable for teaching/demo.</li>
</ul>

<h3>Example 4 — GTN / CTC: Graph-Based Training &amp; Viterbi</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># --- GTN-based CTC loss and Viterbi (adapted) ---
</span><span class="kn">import</span> <span class="nn">torch.nn.functional</span> <span class="k">as</span> <span class="n">F</span>
<span class="kn">import</span> <span class="nn">gtn</span>

<span class="k">class</span> <span class="nc">CTCLossFunction</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">autograd</span><span class="p">.</span><span class="n">Function</span><span class="p">):</span>
    <span class="o">@</span><span class="nb">staticmethod</span>
    <span class="k">def</span> <span class="nf">create_ctc_graph</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="n">blank_idx</span><span class="p">):</span>
        <span class="n">g_criterion</span> <span class="o">=</span> <span class="n">gtn</span><span class="p">.</span><span class="n">Graph</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">L</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">target</span><span class="p">);</span> <span class="n">S</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">L</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">S</span><span class="p">):</span>
            <span class="n">idx</span> <span class="o">=</span> <span class="p">(</span><span class="n">l</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span>
            <span class="n">g_criterion</span><span class="p">.</span><span class="n">add_node</span><span class="p">(</span><span class="n">l</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="n">l</span> <span class="o">==</span> <span class="n">S</span> <span class="o">-</span> <span class="mi">1</span> <span class="ow">or</span> <span class="n">l</span> <span class="o">==</span> <span class="n">S</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span>
            <span class="n">label</span> <span class="o">=</span> <span class="n">target</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="k">if</span> <span class="n">l</span> <span class="o">%</span> <span class="mi">2</span> <span class="k">else</span> <span class="n">blank_idx</span>
            <span class="n">g_criterion</span><span class="p">.</span><span class="n">add_arc</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">g_criterion</span><span class="p">.</span><span class="n">add_arc</span><span class="p">(</span><span class="n">l</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">l</span> <span class="o">%</span> <span class="mi">2</span> <span class="ow">and</span> <span class="n">l</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">label</span> <span class="o">!=</span> <span class="n">target</span><span class="p">[</span><span class="n">idx</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]:</span>
                <span class="n">g_criterion</span><span class="p">.</span><span class="n">add_arc</span><span class="p">(</span><span class="n">l</span> <span class="o">-</span> <span class="mi">2</span><span class="p">,</span> <span class="n">l</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
        <span class="n">g_criterion</span><span class="p">.</span><span class="n">arc_sort</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">g_criterion</span>

    <span class="o">@</span><span class="nb">staticmethod</span>
    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">log_probs</span><span class="p">,</span> <span class="n">targets</span><span class="p">,</span> <span class="n">blank_idx</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">reduction</span><span class="o">=</span><span class="s">"none"</span><span class="p">):</span>
        <span class="n">B</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">C</span> <span class="o">=</span> <span class="n">log_probs</span><span class="p">.</span><span class="n">shape</span>
        <span class="n">losses</span><span class="p">,</span> <span class="n">scales</span><span class="p">,</span> <span class="n">emissions_graphs</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span><span class="o">*</span><span class="n">B</span><span class="p">,</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span><span class="o">*</span><span class="n">B</span><span class="p">,</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span><span class="o">*</span><span class="n">B</span>

        <span class="k">def</span> <span class="nf">process</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
            <span class="n">g_emissions</span> <span class="o">=</span> <span class="n">gtn</span><span class="p">.</span><span class="n">linear_graph</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">log_probs</span><span class="p">.</span><span class="n">requires_grad</span><span class="p">)</span>
            <span class="n">cpu_data</span> <span class="o">=</span> <span class="n">log_probs</span><span class="p">[</span><span class="n">b</span><span class="p">].</span><span class="n">cpu</span><span class="p">().</span><span class="n">contiguous</span><span class="p">()</span>
            <span class="n">g_emissions</span><span class="p">.</span><span class="n">set_weights</span><span class="p">(</span><span class="n">cpu_data</span><span class="p">.</span><span class="n">data_ptr</span><span class="p">())</span>
            <span class="n">g_criterion</span> <span class="o">=</span> <span class="n">CTCLossFunction</span><span class="p">.</span><span class="n">create_ctc_graph</span><span class="p">(</span><span class="n">targets</span><span class="p">[</span><span class="n">b</span><span class="p">],</span> <span class="n">blank_idx</span><span class="p">)</span>
            <span class="n">g_loss</span> <span class="o">=</span> <span class="n">gtn</span><span class="p">.</span><span class="n">negate</span><span class="p">(</span><span class="n">gtn</span><span class="p">.</span><span class="n">forward_score</span><span class="p">(</span><span class="n">gtn</span><span class="p">.</span><span class="n">intersect</span><span class="p">(</span><span class="n">g_emissions</span><span class="p">,</span> <span class="n">g_criterion</span><span class="p">)))</span>
            <span class="n">scale</span> <span class="o">=</span> <span class="mf">1.0</span>
            <span class="k">if</span> <span class="n">reduction</span> <span class="o">==</span> <span class="s">"mean"</span><span class="p">:</span>
                <span class="n">L</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">targets</span><span class="p">[</span><span class="n">b</span><span class="p">]);</span> <span class="n">scale</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="n">L</span> <span class="k">if</span> <span class="n">L</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="n">scale</span>
            <span class="k">elif</span> <span class="n">reduction</span> <span class="o">!=</span> <span class="s">"none"</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"invalid reduction"</span><span class="p">)</span>
            <span class="n">losses</span><span class="p">[</span><span class="n">b</span><span class="p">],</span> <span class="n">scales</span><span class="p">[</span><span class="n">b</span><span class="p">],</span> <span class="n">emissions_graphs</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">=</span> <span class="n">g_loss</span><span class="p">,</span> <span class="n">scale</span><span class="p">,</span> <span class="n">g_emissions</span>

        <span class="n">gtn</span><span class="p">.</span><span class="n">parallel_for</span><span class="p">(</span><span class="n">process</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="n">B</span><span class="p">))</span>
        <span class="n">ctx</span><span class="p">.</span><span class="n">auxiliary_data</span> <span class="o">=</span> <span class="p">(</span><span class="n">losses</span><span class="p">,</span> <span class="n">scales</span><span class="p">,</span> <span class="n">emissions_graphs</span><span class="p">,</span> <span class="n">log_probs</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
        <span class="n">loss</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">tensor</span><span class="p">([</span><span class="n">losses</span><span class="p">[</span><span class="n">b</span><span class="p">].</span><span class="n">item</span><span class="p">()</span> <span class="o">*</span> <span class="n">scales</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">B</span><span class="p">)])</span>
        <span class="k">return</span> <span class="n">torch</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">loss</span><span class="p">.</span><span class="n">cuda</span><span class="p">()</span> <span class="k">if</span> <span class="n">log_probs</span><span class="p">.</span><span class="n">is_cuda</span> <span class="k">else</span> <span class="n">loss</span><span class="p">)</span>

    <span class="o">@</span><span class="nb">staticmethod</span>
    <span class="k">def</span> <span class="nf">backward</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">grad_output</span><span class="p">):</span>
        <span class="n">losses</span><span class="p">,</span> <span class="n">scales</span><span class="p">,</span> <span class="n">emissions_graphs</span><span class="p">,</span> <span class="n">in_shape</span> <span class="o">=</span> <span class="n">ctx</span><span class="p">.</span><span class="n">auxiliary_data</span>
        <span class="n">B</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">C</span> <span class="o">=</span> <span class="n">in_shape</span>
        <span class="n">input_grad</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">empty</span><span class="p">((</span><span class="n">B</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">C</span><span class="p">))</span>
        <span class="k">def</span> <span class="nf">process</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
            <span class="n">gtn</span><span class="p">.</span><span class="n">backward</span><span class="p">(</span><span class="n">losses</span><span class="p">[</span><span class="n">b</span><span class="p">],</span> <span class="bp">False</span><span class="p">)</span>
            <span class="n">emissions</span> <span class="o">=</span> <span class="n">emissions_graphs</span><span class="p">[</span><span class="n">b</span><span class="p">]</span>
            <span class="n">grad</span> <span class="o">=</span> <span class="n">emissions</span><span class="p">.</span><span class="n">grad</span><span class="p">().</span><span class="n">weights_to_numpy</span><span class="p">()</span>
            <span class="n">input_grad</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">from_numpy</span><span class="p">(</span><span class="n">grad</span><span class="p">).</span><span class="n">view</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">C</span><span class="p">)</span> <span class="o">*</span> <span class="n">scales</span><span class="p">[</span><span class="n">b</span><span class="p">]</span>
        <span class="n">gtn</span><span class="p">.</span><span class="n">parallel_for</span><span class="p">(</span><span class="n">process</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="n">B</span><span class="p">))</span>
        <span class="k">if</span> <span class="n">grad_output</span><span class="p">.</span><span class="n">is_cuda</span><span class="p">:</span>
            <span class="n">input_grad</span> <span class="o">=</span> <span class="n">input_grad</span><span class="p">.</span><span class="n">cuda</span><span class="p">()</span>
        <span class="n">input_grad</span> <span class="o">*=</span> <span class="n">grad_output</span> <span class="o">/</span> <span class="n">B</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">input_grad</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

<span class="n">CTCLoss</span> <span class="o">=</span> <span class="n">CTCLossFunction</span><span class="p">.</span><span class="nb">apply</span>

<span class="k">def</span> <span class="nf">viterbi</span><span class="p">(</span><span class="n">energies</span><span class="p">,</span> <span class="n">targets</span><span class="p">,</span> <span class="n">blank_idx</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
    <span class="n">outputs</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="n">energies</span>
    <span class="n">B</span><span class="p">,</span> <span class="n">T</span><span class="p">,</span> <span class="n">C</span> <span class="o">=</span> <span class="n">outputs</span><span class="p">.</span><span class="n">shape</span>
    <span class="n">paths</span><span class="p">,</span> <span class="n">scores</span><span class="p">,</span> <span class="n">emissions_graphs</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span><span class="o">*</span><span class="n">B</span><span class="p">,</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span><span class="o">*</span><span class="n">B</span><span class="p">,</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span><span class="o">*</span><span class="n">B</span>
    <span class="k">def</span> <span class="nf">process</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
        <span class="n">L</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">targets</span><span class="p">[</span><span class="n">b</span><span class="p">])</span>
        <span class="n">g_emissions</span> <span class="o">=</span> <span class="n">gtn</span><span class="p">.</span><span class="n">linear_graph</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">outputs</span><span class="p">.</span><span class="n">requires_grad</span><span class="p">)</span>
        <span class="n">cpu_data</span> <span class="o">=</span> <span class="n">outputs</span><span class="p">[</span><span class="n">b</span><span class="p">].</span><span class="n">cpu</span><span class="p">().</span><span class="n">contiguous</span><span class="p">()</span>
        <span class="n">g_emissions</span><span class="p">.</span><span class="n">set_weights</span><span class="p">(</span><span class="n">cpu_data</span><span class="p">.</span><span class="n">data_ptr</span><span class="p">())</span>
        <span class="n">g_criterion</span> <span class="o">=</span> <span class="n">CTCLossFunction</span><span class="p">.</span><span class="n">create_ctc_graph</span><span class="p">(</span><span class="n">targets</span><span class="p">[</span><span class="n">b</span><span class="p">],</span> <span class="n">blank_idx</span><span class="p">)</span>
        <span class="n">g_inter</span> <span class="o">=</span> <span class="n">gtn</span><span class="p">.</span><span class="n">intersect</span><span class="p">(</span><span class="n">g_emissions</span><span class="p">,</span> <span class="n">g_criterion</span><span class="p">)</span>
        <span class="n">g_score</span> <span class="o">=</span> <span class="n">gtn</span><span class="p">.</span><span class="n">viterbi_score</span><span class="p">(</span><span class="n">g_inter</span><span class="p">)</span>
        <span class="n">g_path</span> <span class="o">=</span> <span class="n">gtn</span><span class="p">.</span><span class="n">viterbi_path</span><span class="p">(</span><span class="n">g_inter</span><span class="p">)</span>
        <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">mapped</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">g_path</span><span class="p">.</span><span class="n">labels_to_list</span><span class="p">():</span>
            <span class="k">if</span> <span class="mi">2</span><span class="o">*</span><span class="n">p</span> <span class="o">&lt;</span> <span class="n">L</span><span class="p">:</span>
                <span class="n">l</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span> <span class="n">mapped</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">p</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">mapped</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">l</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">paths</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">=</span> <span class="n">mapped</span>
        <span class="n">scores</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="n">g_score</span><span class="p">.</span><span class="n">item</span><span class="p">()</span>
        <span class="n">emissions_graphs</span><span class="p">[</span><span class="n">b</span><span class="p">]</span> <span class="o">=</span> <span class="n">g_emissions</span>
    <span class="n">gtn</span><span class="p">.</span><span class="n">parallel_for</span><span class="p">(</span><span class="n">process</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="n">B</span><span class="p">))</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">scores</span><span class="p">,</span> <span class="n">paths</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">train_gtn_model</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">num_epochs</span><span class="p">,</span> <span class="n">train_loader</span><span class="p">,</span> <span class="n">criterion</span><span class="p">,</span> <span class="n">optimizer</span><span class="p">):</span>
    <span class="n">pbar</span> <span class="o">=</span> <span class="n">tqdm</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">num_epochs</span><span class="p">))</span>
    <span class="n">model</span><span class="p">.</span><span class="n">train</span><span class="p">()</span>
    <span class="n">device</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">device</span><span class="p">(</span><span class="s">"cuda:0"</span><span class="p">)</span> <span class="k">if</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="n">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="n">torch</span><span class="p">.</span><span class="n">device</span><span class="p">(</span><span class="s">"cpu"</span><span class="p">)</span>
    <span class="n">model</span><span class="p">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">pbar</span><span class="p">:</span>
        <span class="n">total</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="k">for</span> <span class="n">samples</span><span class="p">,</span> <span class="n">targets</span> <span class="ow">in</span> <span class="n">train_loader</span><span class="p">:</span>
            <span class="n">samples</span><span class="p">,</span> <span class="n">targets</span> <span class="o">=</span> <span class="n">samples</span><span class="p">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">),</span> <span class="n">targets</span><span class="p">.</span><span class="n">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
            <span class="n">optimizer</span><span class="p">.</span><span class="n">zero_grad</span><span class="p">()</span>
            <span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">(</span><span class="n">samples</span><span class="p">.</span><span class="n">unsqueeze</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>          <span class="c1"># (B,L,27)
</span>            <span class="n">log_probs</span> <span class="o">=</span> <span class="n">F</span><span class="p">.</span><span class="n">log_softmax</span><span class="p">(</span><span class="o">-</span><span class="mf">1.0</span> <span class="o">*</span> <span class="n">outputs</span><span class="p">,</span> <span class="n">dim</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
            <span class="n">loss</span> <span class="o">=</span> <span class="n">criterion</span><span class="p">(</span><span class="n">log_probs</span><span class="p">,</span> <span class="n">targets</span><span class="p">)</span>           <span class="c1"># CTC
</span>            <span class="n">total</span> <span class="o">+=</span> <span class="n">loss</span><span class="p">.</span><span class="n">item</span><span class="p">()</span>
            <span class="n">loss</span><span class="p">.</span><span class="n">backward</span><span class="p">();</span> <span class="n">optimizer</span><span class="p">.</span><span class="n">step</span><span class="p">()</span>
        <span class="n">pbar</span><span class="p">.</span><span class="n">set_postfix</span><span class="p">({</span><span class="s">'train_loss'</span><span class="p">:</span> <span class="n">total</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">.</span><span class="n">dataset</span><span class="p">)})</span>

<span class="c1"># Usage:
# sds3 = SimpleWordsDataset(3, 2500)
# loader3 = torch.utils.data.DataLoader(sds3, batch_size=32, num_workers=0, collate_fn=collate_fn)
# gtn_model = copy.deepcopy(model)
# optimizer = Adam(gtn_model.parameters(), lr=1e-3)
# train_gtn_model(gtn_model, 15, loader3, CTCLoss, optimizer)
</span></code></pre></div></div>

<p><strong>Highlights</strong></p>
<ul>
  <li>CTC = alignment graph <code class="language-plaintext highlighter-rouge">A_y</code> ∘ emissions graph <code class="language-plaintext highlighter-rouge">E</code>.</li>
  <li>Training uses <strong>log-softmax</strong> and <strong>CTCLoss</strong>.</li>
  <li><code class="language-plaintext highlighter-rouge">viterbi</code> via GTN yields best path and score without manual DP loops.</li>
</ul>

<h3>Example 5 — From Scratch (No Pretraining) &amp; Handwritten-Style Font</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># --- No-pretraining: GTN/CTC directly on multi-character data ---
# sds_np = SimpleWordsDataset(3, 2500)
# loader_np = torch.utils.data.DataLoader(sds_np, batch_size=32, num_workers=0, collate_fn=collate_fn)
# gtn_no_pretrained = SimpleNet()
# optimizer = Adam(gtn_no_pretrained.parameters(), lr=1e-3)
# train_gtn_model(gtn_no_pretrained, 20, loader_np, CTCLoss, optimizer)
</span>
<span class="c1"># --- Custom "handwritten-style" font dataset ---
</span><span class="k">class</span> <span class="nc">CustomWordsDataset</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">utils</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">IterableDataset</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">max_length</span><span class="p">,</span> <span class="nb">len</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">jitter</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">noise</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">custom_fonts_path</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">max_length</span> <span class="o">=</span> <span class="n">max_length</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">transforms</span> <span class="o">=</span> <span class="n">transforms</span><span class="p">.</span><span class="n">ToTensor</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="nb">len</span> <span class="o">=</span> <span class="nb">len</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">jitter</span> <span class="o">=</span> <span class="n">jitter</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">noise</span> <span class="o">=</span> <span class="n">noise</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">custom_fonts_path</span> <span class="o">=</span> <span class="n">custom_fonts_path</span>
  
    <span class="k">def</span> <span class="nf">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="nb">len</span>

    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="nb">len</span><span class="p">):</span>
            <span class="n">text</span> <span class="o">=</span> <span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="n">string</span><span class="p">.</span><span class="n">ascii_lowercase</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">max_length</span><span class="p">)])</span>
            <span class="n">img</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">draw_text</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">jitter</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">jitter</span><span class="p">,</span> <span class="n">noise</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">noise</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">img</span><span class="p">,</span> <span class="n">text</span>
  
    <span class="k">def</span> <span class="nf">draw_text</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">jitter</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">noise</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">length</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">length</span> <span class="o">=</span> <span class="mi">18</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
        <span class="n">img</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="s">'L'</span><span class="p">,</span> <span class="p">(</span><span class="n">length</span><span class="p">,</span> <span class="mi">32</span><span class="p">))</span>
        <span class="n">fnt</span> <span class="o">=</span> <span class="n">ImageFont</span><span class="p">.</span><span class="n">truetype</span><span class="p">(</span><span class="s">"fonts/Anonymous.ttf"</span> <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">custom_fonts_path</span> <span class="k">else</span> <span class="bp">self</span><span class="p">.</span><span class="n">custom_fonts_path</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
        <span class="n">d</span> <span class="o">=</span> <span class="n">ImageDraw</span><span class="p">.</span><span class="n">Draw</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
        <span class="n">pos</span> <span class="o">=</span> <span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">7</span><span class="p">),</span> <span class="mi">5</span><span class="p">)</span> <span class="k">if</span> <span class="n">jitter</span> <span class="k">else</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
        <span class="n">d</span><span class="p">.</span><span class="n">text</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">font</span><span class="o">=</span><span class="n">fnt</span><span class="p">)</span>
        <span class="n">img</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">transforms</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
        <span class="n">img</span><span class="p">[</span><span class="n">img</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span> 
        <span class="k">if</span> <span class="n">noise</span><span class="p">:</span>
            <span class="n">img</span> <span class="o">+=</span> <span class="n">torch</span><span class="p">.</span><span class="n">bernoulli</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">ones_like</span><span class="p">(</span><span class="n">img</span><span class="p">)</span> <span class="o">*</span> <span class="mf">0.1</span><span class="p">)</span>
            <span class="n">img</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="n">clamp</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">img</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

<span class="c1"># Usage (after downloading a font to ./fonts/3dumb/2Dumb.ttf):
# sds_hw = CustomWordsDataset(3, 2500, custom_fonts_path="./fonts/3dumb/2Dumb.ttf")
# loader_hw = torch.utils.data.DataLoader(sds_hw, batch_size=32, num_workers=0, collate_fn=collate_fn)
# gtn_hw = SimpleNet()
# optimizer = Adam(gtn_hw.parameters(), lr=1e-3)
# train_gtn_model(gtn_hw, 20, loader_hw, CTCLoss, optimizer)
</span></code></pre></div></div>

<p><strong>Highlights</strong></p>
<ul>
  <li>Training <strong>from scratch</strong> with GTN/CTC works, though convergence can be slower.</li>
  <li>Domain shift (e.g., handwritten font) lowers scores; still decodes plausible strings.</li>
</ul>

<h3>Example 6 — Decoding (Collapse Repeats, Drop Blanks)</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">indices_to_str</span><span class="p">(</span><span class="n">indices</span><span class="p">):</span>
    <span class="s">"""
    Collapse heuristic:
      1) Map 0..25 -&gt; letters; 26 -&gt; '_'
      2) Split by '_' segments; take the most frequent char per segment
      3) Remove '_' between segments -&gt; final string with '_' as segment delimiter (optional)
    """</span>
    <span class="n">out</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">ind</span> <span class="ow">in</span> <span class="n">indices</span><span class="p">:</span>
        <span class="n">out</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">'_'</span> <span class="k">if</span> <span class="n">ind</span> <span class="o">==</span> <span class="n">BETWEEN</span> <span class="k">else</span> <span class="nb">chr</span><span class="p">(</span><span class="n">ind</span> <span class="o">+</span> <span class="nb">ord</span><span class="p">(</span><span class="s">'a'</span><span class="p">)))</span>
    <span class="n">segments</span> <span class="o">=</span> <span class="s">""</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">out</span><span class="p">).</span><span class="n">split</span><span class="p">(</span><span class="s">'_'</span><span class="p">)</span>
    <span class="n">collapsed</span> <span class="o">=</span> <span class="p">[</span><span class="n">Counter</span><span class="p">(</span><span class="n">seg</span><span class="p">).</span><span class="n">most_common</span><span class="p">(</span><span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">seg</span> <span class="ow">in</span> <span class="n">segments</span> <span class="k">if</span> <span class="n">seg</span><span class="p">]</span>
    <span class="k">return</span> <span class="s">"_"</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">collapsed</span><span class="p">)</span>  <span class="c1"># or "".join(collapsed) to remove underscores entirely
</span>
<span class="c1"># Example:
# img = SimpleWordsDataset(5, len=1).draw_text('hello')
# energies = ebm_model(img.unsqueeze(0).unsqueeze(0))
# min_indices = energies[0].argmin(dim=-1)
# print(indices_to_str(min_indices))
</span></code></pre></div></div>
:ET